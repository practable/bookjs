swagger: '2.0'
info:
  version: '0.2'
  title: AdvanceBooking
  description: User API for booking slots in advance
  contact:
    email: timothy.d.drysdale@gmail.com
    name: Tim Drysdale
    url: https://practable.io
host: book.practable.io
basePath: /api/v1
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header 
schemes:
  - http
consumes:
- application/json
- text/plain
produces:
- application/json
- text/plain

paths:

  /admin/bookings:
    get:
      description: Exports a copy of the current bookings, with sufficient information to allow editing and replacement. If successful produces JSON-formatted bookings list.
      summary: Export a copy of all current bookings
      tags:
      - admin
      operationId: ExportBookings
      deprecated: false
      produces:
      - application/json
      security:
        - Bearer: []
      responses:
        200:
          description: 'OK'
          schema:
            $ref: '#/definitions/Bookings'
          headers: {}
        401:
          $ref: '#/responses/Unauthorized'
        404:
          $ref: '#/responses/NotFound'
        500:
          $ref: '#/responses/InternalError'

    put:
      summary: Replace current bookings 
      description: Deletes all current bookings, refunds usage to users, and then replaces with current bookings. Existing users are retained, new users are created as required to match bookings.
      tags:
      - admin
      operationId: ReplaceBookings
      deprecated: false
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: bookings
        in: body
        required: true
        schema:
          $ref: '#/definitions/Bookings'
      security:
        - Bearer: []
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/StoreStatusAdmin'
          headers: {}
        401:
          $ref: '#/responses/Unauthorized'
        404:
          $ref: '#/responses/NotFound'
        500:
          $ref: '#/responses/InternalError'

  /admin/manifest:
    get:
      summary: Export the manifest
      description: Export the manifest (resources, slots, policies, descriptions etc). Does not include bookings or users
      tags:
      - admin
      operationId: ExportManifest
      deprecated: false
      produces:
      - application/json
      security:
        - Bearer: []
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Manifest'
          headers: {}
        401:
          $ref: '#/responses/Unauthorized'
        404:
          $ref: '#/responses/NotFound'
        500:
          $ref: '#/responses/InternalError'
    put:
      summary: Replace the manifest
      description: Delete the existing manifest and replace it with a new one. All items have specified names so bookings do not need updating (except perhaps you should if booked resources have been removed) 
      tags:
      - admin
      operationId: ReplaceManifest
      deprecated: false
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: manifest
        in: body
        required: true
        schema:
          $ref: '#/definitions/Manifest'
      security:
        - Bearer: []  
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/StoreStatusAdmin'
          headers: {}
        401:
          $ref: '#/responses/Unauthorized'  
        404:
          $ref: '#/responses/NotFound'
        500:
          $ref: '#/responses/InternalError'
          
  /admin/manifest/check:
    get:
      summary: Check a manifest
      description: Check a manifest for errors. Returns 204 if OK or, if not, returns 500 with a list of error(s).
      tags:
      - admin
      operationId: CheckManifest
      deprecated: false
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: manifest
        in: body
        required: true
        schema:
          $ref: '#/definitions/Manifest'
      security:
        - Bearer: []
      responses:
        204:
          description: OK
        401:
          $ref: '#/responses/Unauthorized'
        404:
          $ref: '#/responses/NotFound'
        500:
          description: InternalError
          schema:
            $ref: '#/responses/ErrorList'
            
  /admin/oldbookings:
    get:
      summary: Export a copy of all old bookings
      description: Exports a copy of the old bookings, with sufficient information to allow editing and replacement. If successful produces JSON-formatted bookings list. 
      tags:
      - admin
      operationId: ExportOldBookings
      deprecated: false
      produces:
      - application/json  
      security:
        - Bearer: []
      responses:
        200:
          description: 'OK'
          schema:
            $ref: '#/definitions/Bookings'
          headers: {}
        401:
          $ref: '#/responses/Unauthorized'
        404:
          $ref: '#/responses/NotFound'
        500:
          $ref: '#/responses/InternalError'

    put:
      summary: Replace old bookings 
      description: Deletes all old bookings, and all users, then replaces both according to the bookings in the request, i.e. users and their usage are created as required to match bookings.
      tags:
      - admin
      operationId: ReplaceOldBookings
      deprecated: false
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: bookings
        in: body
        required: true
        schema:
          $ref: '#/definitions/Bookings'
      security:
        - Bearer: []
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/StoreStatusAdmin'
          headers: {}
        401:
          $ref: '#/responses/Unauthorized'
        404:
          $ref: '#/responses/NotFound'
        500:
          $ref: '#/responses/InternalError'
          
  /admin/slots/{slot_name}:
    get:
      description: Gets the availability of the underlying resource for the slot, including a status message. Indicates when equipment is offline temprorarily, e.g. due to failing an automated test.
      summary: Get the availability of the slot
      tags:
      - admin
      operationId: GetSlotIsAvailable
      deprecated: false
      produces:
      - application/json
      parameters:
        - name: slot_name
          in: path
          type: string
          required: true            
      security:
        - Bearer: []
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/SlotStatus'
          headers: {}
        401:
          $ref: '#/responses/Unauthorized'
        404:
          $ref: '#/responses/NotFound'
        500:
          $ref: '#/responses/InternalError'

    put:
      description: Sets the availability of the underlying resource for the slot, including a status message. Used to prevent users accessing equipment that should not be used, e.g. after failing an automated test, or make it available again after fixing it.
      summary: Set the availability of the slot 
      tags:
      - admin
      operationId: SetSlotIsAvailable
      deprecated: false
      parameters:
      - name: slot_name
        in: path
        type: string
        required: true   
      - name: available
        in: query
        type: boolean
        required: true
      - name: reason
        in: query
        type: string
        required: true
      produces:
      - application/json
      security:
        - Bearer: []
      responses:
        204:
          description: OK
        401:
          $ref: '#/responses/Unauthorized'
        404:
          $ref: '#/responses/NotFound'
        500:
          $ref: '#/responses/InternalError'
          
  /admin/status:
    get:
      description: Gets a count of the number of elements in the store, e.g. Bookings, Descriptions etc to facilitate a necessary but not sufficient check that replace manifest and replace bookings have produced the correct results.
      summary: Get current store status
      tags:
      - admin
      operationId: getStoreStatusAdmin
      deprecated: false
      produces:
      - application/json
      security:
        - Bearer: []
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/StoreStatusAdmin'
          headers: {}
        401:
          $ref: '#/responses/Unauthorized'
        404:
          $ref: '#/responses/NotFound'
        500:
          $ref: '#/responses/InternalError'

    put:
      description: Set whether the booking system is locked for users
      summary: set/release booking lock
      tags:
      - admin
      operationId: setLock
      deprecated: false
      parameters:
      - name: lock
        in: query
        required: true
        type: boolean
        description: set booking lock
      - name: msg
        in: query
        required: false
        type: string
        description: set message of the day (use query so it can be seen in server logs)        
      produces:
      - application/json
      security:
        - Bearer: []
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/StoreStatusAdmin'
          headers: {}
        401:
          $ref: '#/responses/Unauthorized'
        404:
          $ref: '#/responses/NotFound'
        500:
          $ref: '#/responses/InternalError'

  /admin/users:
    get:
      summary: Export users
      description: Export bookings and usage data for each user
      tags:
      - admin
      operationId: ExportUsers
      deprecated: false
      produces:
      - application/json
      security:
        - Bearer: []
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Users'
          headers: {}
        401:
          $ref: '#/responses/Unauthorized'
        404:
          $ref: '#/responses/NotFound'
        500:
          $ref: '#/responses/InternalError'
          
  /descriptions/{description_name}:
    get:
      summary: Get description 
      description: Get description
      tags:
      - users
      operationId: GetDescription
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: description_name
        in: path
        required: true
        type: string
        description: ''
      security:
        - Bearer: []  
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Description'
          headers: {}
        401:
          $ref: '#/responses/Unauthorized'  
        404:
          $ref: '#/responses/NotFound'
        500:
          $ref: '#/responses/InternalError'
          
  /login/{user_name}:
    post:
      summary: Request a user access token
      description: The access token is required to authenticate requests to the rest of the user-facing API. Ideally access to this endpoint should be secured by the identity management system. The access token has a limited lifetime but can be re-requested as needed. Consider rate-limiting this per-connection.
      tags:
      - users
      operationId: GetAccessToken
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: user_name
        in: path
        required: true
        type: string
        description: ''
      responses:
        200:
          description: 'OK'
          schema:
            $ref: '#/definitions/AccessToken'
          headers: {}
        401:
          $ref: '#/responses/Unauthorized'
        404:
          $ref: '#/responses/NotFound'
        500:
          $ref: '#/responses/InternalError'
          
  /policies/{policy_name}:
    get:
      summary: Get policy
      description: Get policy
      tags:
      - users
      operationId: GetPolicy
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: policy_name
        in: path
        required: true
        type: string
        description: ''
      security:
        - Bearer: []
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/PolicyDescribed'
          headers: {}
        401:
          $ref: '#/responses/Unauthorized'
        404:
          $ref: '#/responses/NotFound'
        500:
          $ref: '#/responses/InternalError'
          
  /policies/{policy_name}/slots/{slot_name}:
    get:
      summary: Get availability for the slot under the policy
      description: Pagination is supported by the limit and offset parameters. For the first query '?limit=20&offset=0', the second '?limit=20&offset=20'. The offset is equal to the zero-indexed value of the first item of the next page to be returned (20 items are indexed from 0 to 19, so 20 is the first item to be returned in the second page). Note that drift can occur if slots are booked during the sending of availability data, potentially preventing a user from seeing some slots that move earlier in the index and cross a pagination boundary. Users should refresh their results from 0 offset on a regular-ish basis if they wish to avoid this.
      tags:
      - users
      operationId: GetAvailability
      deprecated: false
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: policy_name
        in: path
        required: true
        type: string
        description: ''
      - name: slot_name
        in: path
        required: true
        type: string
        description: ''
      - name: limit
        in: query
        type: integer
        required: false
      - name: offset
        in: query
        type: integer
        required: false
      security:
        - Bearer: []
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Intervals'
          headers: {}
        401:
          $ref: '#/responses/Unauthorized'
        404:
          $ref: '#/responses/NotFound'
        500:
          $ref: '#/responses/InternalError'

    post:
      summary: Request a booking
      description: A booking is requested for a specific combination of policy-slot-user-from-to. Users should check availability first, and only make requests that are likely to be granted. If there is no current availability then requests will be denied. If there is availability, there is still a chance another user requests the same slot just before - whichever request is received by the server first will be allowed, the other denied. The user_name must match the user_name the user logged in with, that is in the authorisation token in the header.
      tags:
      - users
      operationId: MakeBooking
      deprecated: false
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: policy_name
        in: path
        required: true
        type: string
        description: ''
      - name: slot_name
        in: path
        required: true
        type: string
        description: ''
      - name: user_name
        in: query
        required: true
        type: string
        description: ''
      - name: from
        in: query
        required: true
        type: string
        format: date-time
      - name: to
        in: query
        required: true
        type: string
        format: date-time
      security:
        - Bearer: []
      responses:
        204:
          description: 'OK - No Content'
        401:
          $ref: '#/responses/Unauthorized'
        404:
          $ref: '#/responses/NotFound'
        409:
          description: 'Conflict - unavailable for the requested interval'
          schema: {}
        500:
          $ref: '#/responses/InternalError'
          
  /users/unique:
    post:
      summary: Request a new, unique username
      description: Generates a unique username that meets the minimum length requirements for the booking system. No security/token needed, because users needs a/this name to login
      tags:
      - users
      operationId: UniqueName
      deprecated: false
      produces:
      - application/json
      responses:
        200:
          description: 'OK'
          schema:
            $ref: '#/definitions/UserName'
        401:
          $ref: '#/responses/Unauthorized'
        500:
          $ref: '#/responses/InternalError'
          
    
  /users/status:
    get:
      description: Gets the current store status from a user perspective (e.g. is it locked? what is the reason?)
      summary: Get current store status
      tags:
      - users
      operationId: getStoreStatusUser
      deprecated: false
      produces:
      - application/json
      security:
        - Bearer: []
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/StoreStatusUser'
          headers: {}
        401:
          $ref: '#/responses/Unauthorized'
        404:
          $ref: '#/responses/NotFound'
        500:
          $ref: '#/responses/InternalError'
         
  /users/{user_name}/bookings:
    get:
      summary: Get all current bookings for the user
      description: Get all current bookings for the user. It's assumed that no pagination will be required due to likely policy limits being a couple of bookings per policy and users typically having only a couple of policies. No pagination may cause issues for admins that book hundreds or thousands slots on behalf of students, although it is likely such bookings would be automated so no need to support rapid update of a GUI, at least for now.
      tags:
      - users
      operationId: GetBookingsForUser
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: user_name
        in: path
        required: true
        type: string
        description: ''
      security:
        - Bearer: []
      responses:
        200:
          description: 'OK'
          schema:
            $ref: '#/definitions/Bookings'
          headers: {}
        401:
          $ref: '#/responses/Unauthorized'
        404:
          $ref: '#/responses/NotFound'
        500:
          $ref: '#/responses/InternalError'
          
  /users/{user_name}/bookings/{booking_name}:
    delete:
      summary: Cancel the booking
      description: For users to cancel their booking(s) on at a time. Checks if the booking is unstarted and/or unfulfilled, and cancels if so. A booking cannot be cancelled once an activity has been requested. A booking can be cancelled after it started, so long as it is unfulfilled (no activity requested). The user must be the owner of the booking to cancel it. Admins can cancel bookings by Lock() -> ExportBookings() -> edit -> ReplaceBookings()-> Unlock(). There is no need for an endpoint for admin single booking cancellation because the only visibility they have of bookings is via ExportBookings. Remaing time in the booking at time of cancellation is refunded to the user's usage tracker for that policy. That is intended to encourage early cancellation. Returns 404 on successful cancellation, or if there is no such booking. 
      tags:
      - users
      operationId: CancelBooking
      deprecated: false
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: user_name
        in: path
        required: true
        type: string
        description: ''
      - name: booking_name
        in: path
        required: true
        type: string
        description: ''
      security:
        - Bearer: []
      responses:
        401:
          $ref: '#/responses/Unauthorized'
        404:
          $ref: '#/responses/NotFound'
        500:
          $ref: '#/responses/InternalError'

    put:
      summary: Request the activity that goes with the booking
      description: Checks if the booking has started or not and if so, returns an activity that can be used to access the booked resource. Since this mutates the state of the booking (from unfulfilled to fulfilled) it is a put not a get.
      tags:
      - users
      operationId: GetActivity
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: user_name
        in: path
        required: true
        type: string
        description: ''
      - name: booking_name
        in: path
        required: true
        type: string
        description: ''
      security:
        - Bearer: []
      responses:
        200:
          description: 'OK'
          schema:
            $ref: '#/definitions/Activity'
          headers: {}
        401:
          $ref: '#/responses/Unauthorized'
        404:
          $ref: '#/responses/NotFound'
        500:
          $ref: '#/responses/InternalError'
          
  /users/{user_name}/oldbookings:
    get:
      summary: Get all old bookings for the user
      description: Get all old bookings for the user. It's assumed that no pagination will be required due to likely policy limits including usage limits and users typically having only a couple of policies, although in practice pagination may be useful for heavy users. 
      tags:
      - users
      operationId: GetOldBookingsForUser
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: user_name
        in: path
        required: true
        type: string
        description: ''
      security:
        - Bearer: []
      responses:
        200:
          description: 'OK'
          schema:
            $ref: '#/definitions/Bookings'
          headers: {}
        401:
          $ref: '#/responses/Unauthorized'
        404:
          $ref: '#/responses/NotFound'
        500:
          $ref: '#/responses/InternalError'
          
  /users/{user_name}/policies:
    get:
      summary: Get all current policies for user
      description: Get all current policies for user
      tags:
      - users
      operationId: GetPoliciesForUser
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: user_name
        in: path
        required: true
        type: string
        description: ''
      security:
        - Bearer: []
      responses:
        200:
          description: 'OK'
          schema:
            $ref: '#/definitions/PoliciesDescribed'
          headers: {}
        401:
          $ref: '#/responses/Unauthorized'
        404:
          $ref: '#/responses/NotFound'
        500:
          $ref: '#/responses/InternalError'

  /users/{user_name}/policies/{policy_name}:
    get:
      summary: Get policy status 
      description: Get policy status for the user
      tags:
      - users
      operationId: GetPolicyStatusForUser
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: user_name
        in: path
        required: true
        type: string
        description: ''
      - name: policy_name
        in: path
        required: true
        type: string
        description: ''
      security:
        - Bearer: []
      responses:
        200:
          description: 'OK'
          schema:
            $ref: '#/definitions/PolicyStatus'
          headers: {}
        401:
          $ref: '#/responses/Unauthorized'
        404:
          $ref: '#/responses/NotFound'
        500:
          $ref: '#/responses/InternalError'

    post:
      summary: Add policy to user account
      description: Add policy to the list of policies with which this user is allowed to make bookings
      tags:
      - users
      operationId: AddPolicyForUser
      deprecated: false
      produces:
      - application/json
      parameters:
      - name: user_name
        in: path
        required: true
        type: string
        description: ''
      - name: policy_name
        in: path
        required: true
        type: string
        description: ''
      security:
        - Bearer: []
      responses:
        204:
          description: 'OK - No Content'
        401:
          $ref: '#/responses/Unauthorized'
        404:
          $ref: '#/responses/NotFound'
        500:
          $ref: '#/responses/InternalError'
          
definitions:

  AccessToken:
    title: access token
    description: intended use is for users to access the API, and is tied to their user_name.
    type: object
    properties:
      token:
        type: string
      iat:
        description: Issued At
        type: number
        format: unix-timestamp
      nbf:
        description: Not before
        type: number
        format: unix-timestamp
      exp:
        description: Expires At
        type: number
        format: unix-timestamp
      aud:
        description: Audience
        type: string
      sub:
        description: Subject
        type: string
      scopes:
        description: List of scopes
        type: array
        items:
          type: string
          example: user:booking
    required:
    - token
    - nbf
    - exp
    - aud
    - sub
    - scopes
        
  Activity:
    title: activity
    description: An activity represents connection details to instances of pre-agreed resource types such as video, data streams and user interfaces.
    type: object
    properties:
      config:
        description: URL at which to GET the configuration object
        example: https://assets.practable.io/config/experiments/pvna/pvna01-0.0.json
        type: string
        format: url
      description:
        $ref: '#/definitions/Description'
      nbf:
        description: Expires At
        type: number
        format: unix-timestamp
      exp:
        description: Expires At
        type: number
        format: unix-timestamp
      streams:
        description: A list of streams
        type: array
        items:
          $ref: '#/definitions/ActivityStream'
      uis:
        description: User interfaces
        type: array
        items:
          $ref: '#/definitions/UIDescribed'
    required:
    - description
    - exp
    - nbf
    - streams
    - uis
    
  ActivityStream:
    title: stream
    description: Represents an assigned, valid booking slot for an individual piece of equipment
    example:
      for: video
      url: https://relay-access.practable.io/session/abc123
      token: ey....
    type: object
    properties:
      audience:
        type: string
      connection_type:
        type: string
      for:
        description: Describes the stream, and doubles as template key in the URL
        example: video
        type: string
      prefix:
        description: prefix of the relay routing
        example: session
        type: string
      scopes:
        type: array
        items:
          type: string
      topic:
        type: string
      token:
        description: signed jwt token for accessing the stream
        type: string
      url:
        description: URL at which to obtain access to the stream (getting a redirect URL containing a one time code)
        example: https://relay-access.practable.io/session/abc123
        type: string
    required:
    - audience
    - connection_type
    - for
    - scopes
    - topic
    - url
    
  Booking:
    title: booking
    description: A booking represents a promise to supply an activity. The booleans are not required because we don't process the booking status when loading old bookings (all old bookings are assumed to have been good bookings)
    type: object
    properties:
      cancelled:
        description: Has the booking been cancelled?
        type: boolean
      cancelled_at:
        description: time the booking was cancelled
        type: string
        format: date-time
      cancelled_by:
        description: who cancelled the booking, e.g. auto-grace-expired, admin or user
        example: auto-grace-expired
        type: string
      name:
        description: unique name of the booking
        type: string
      policy:
        description: policy under which the booking was made
        type: string
      slot:
        description: name of the slot that has been booked
        type: string
      started:
        description: has the booking been started by the user?
        type: boolean
      started_at:
        description: time the booking was first started by the user
        type: string
        format: date-time
      unfulfilled:
        description: was the resource unavailable
        type: boolean
      user:
        description: name of the user who made the booking
        type: string
      usage_charged:
        description: how much usage was actually charged for this booking
        type: string
      when:
        $ref: '#/definitions/Interval'
    required:
    - name
    - policy
    - slot
    - user
    - when

  Bookings:
    description: list of bookings
    type: array
    items:
      $ref: '#/definitions/Booking'

  Description:
    title: description
    description: Description of a resource e.g. policy, slot, user interface
    example:
      name: Penduino (basic)
      type: pool
      short: Penduino electromagnetic pendulums with pulsed drive and braking
      long: Some longer description
      further: https://static.practable.io/descriptions/pools/penduino/index.html
      thumb: https://assets.practable.io/images/pools/penduino/thumb.png
      image: https://assets.practable.io/images/pools/penduino/image.png
    type: object
    properties:
      name:
        description: Display name
        example: Penduino (basic)
        type: string
      short:
        description: 140 char max description of the interface in plain text
        example: Interface to the penduino electromagnetic pendulum with variable drive, active braking, short and open circuit loading.
        type: string
      type:
        description: Type of resource being described, e.g. pool, activity, userinterface
        example: userinterface
        type: string
      long:
        description: 280 char additional description of the interface in plain text
        type: string
      further:
        description: URL for further information
        example: https://static.practable.io/info/penduino/ui.html
        type: string
      thumb:
        description: URL of thumbnail image (150x150)
        example: https://assets.practable.io/images/penduino-150x150.png
        type: string
      image:
        description: URL of main image (500x500)
        example: https://assets.practable.io/images/penduino-500x500.png
        type: string
    required:
    - name
    - type

  DisplayGuide:
    type: object
    properties:
      book_ahead:
        type: string
      duration: 
        type: string
      max_slots:
        type: integer
      label:
        description: what to display in the tab heading for these slots
        type: string
    required:
      - book_ahead
      - duration
      - label
      - max_slots
      
  Error:
    type: object
    properties:
      code:
        type: string
      message:
        type: string
    required:
      - code
      - message

  Interval:
    type: object
    properties:
      start:
        type: string
        format: date-time
      end:
        type: string
        format: date-time

  Intervals:
    type: array
    items:
      $ref: '#/definitions/Interval'

  Manifest:
    title: manifest
    description: Represents resources that can be booked
    type: object
    properties:
      descriptions:
        type: object
        additionalProperties:
          $ref: '#/definitions/Description'
      display_guides:
        type: object
        additionalProperties:
          $ref: '#/definitions/DisplayGuide'       
      policies:
        type: object
        additionalProperties:
          $ref: '#/definitions/Policy'
      resources:
        type: object
        additionalProperties:
          $ref: '#/definitions/Resource'
      slots:
        type: object
        additionalProperties:
          $ref: '#/definitions/Slot'
      streams:
        type: object
        additionalProperties:
          $ref: '#/definitions/ManifestStream'
      uis:
        type: object
        additionalProperties:
          $ref: '#/definitions/UI'
      ui_sets:
        type: object
        additionalProperties:
          $ref: '#/definitions/UISet'
      windows:
        type: object
        additionalProperties:
          $ref: '#/definitions/Window'
    required:
    - descriptions
    - policies
    - resources
    - slots
    - streams
    - uis
    - ui_sets
    - windows
    
  ManifestStream:
    title: manifest stream
    description: represents a prototype stream as described in manifest
    type: object
    properties:
      connection_type:
        type: string
      for:
        description: Describes the stream, and doubles as template key in the URL
        example: video
        type: string
      scopes:
        type: array
        items:
          type: string
      topic:
        type: string
      url:
        description: URL at which to obtain access to the stream (getting a redirect URL containing a one time code)
        example: https://relay-access.practable.io/session/abc123
        type: string
    required:
    - connection_type
    - for
    - scopes
    - topic
    - url
    
  Policy:
    type: object
    properties:
      allow_start_in_past_within:
        type: string
      book_ahead:
        type: string
      description:
        type: string
      display_guides:
        type: array
        items:
          type: string
      enforce_allow_start_in_past:
        type: boolean
      enforce_book_ahead:
        type: boolean
      enforce_grace_period:
        type: boolean
      enforce_max_bookings:
        type: boolean
      enforce_max_duration:
        type: boolean
      enforce_min_duration:
        type: boolean
      enforce_max_usage:
        type: boolean
      enforce_next_available:
        type: boolean
      enforce_starts_within:
        type: boolean
      enforce_unlimited_users:
        type: boolean
      grace_period:
        type: string
      grace_penalty:
        type: string
      max_bookings:
        type: integer
      max_duration:
        type: string
      min_duration:
        type: string
      max_usage:
        type: string
      next_available:
        type: string
      slots:
        type: array
        items:
          type: string
      starts_within:
        type: string
    required:
      - description
      - slots
      
  PolicyDescribed:
    type: object
    properties:
      allow_start_in_past_within:
        type: string
      book_ahead:
        type: string
      description:
        $ref: '#/definitions/Description'
      display_guides:
        type: object
        additionalProperties:
          $ref: '#/definitions/DisplayGuide'
      enforce_allow_start_in_past:
        type: boolean    
      enforce_book_ahead:
        type: boolean
      enforce_grace_period:
        type: boolean
      enforce_max_bookings:
        type: boolean
      enforce_max_duration:
        type: boolean
      enforce_min_duration:
        type: boolean
      enforce_max_usage:
        type: boolean
      enforce_next_available:
        type: boolean
      enforce_starts_within:
        type: boolean
      enforce_unlimited_users:
        type: boolean
      grace_period:
        type: string
      grace_penalty:
        type: string
      max_bookings:
        type: integer
      max_duration:
        type: string
      min_duration:
        type: string
      max_usage:
        type: string
      next_available:
         type: string       
      slots:
        type: array
        items:
          type: string
      starts_within:
        type: string
    required:
      - description
      - slots
      
  Policies:
    type: array
    items:
      $ref: '#/definitions/Policy'
      
  PoliciesDescribed:
    type: array
    items:
      $ref: '#/definitions/PolicyDescribed'

  PolicyStatus:
    type: object
    properties:
      current_bookings:
        type: integer
      old_bookings:
        type: integer
      usage:
        type: string
    required:
      - current_bookings
      - old_bookings
      - usage
      
  Resource:
    type: object
    properties:
      config_url: 
        type: string
        format: url
      description:
        type: string
      streams:
        type: array
        items:
          type: string
      topic_stub:
        type: string
    required:
      - description
      - streams
      - topic_stub

  Slot:
    type: object
    properties:
      description:
        type: string
      policy:
        type: string
      resource:
        type: string
      ui_set:
        type: string
      window:
        type: string
    required:
      - description
      - policy
      - resource
      - ui_set
      - window
      
  SlotStatus:
    type: object
    properties:
      available:
        type: boolean
      reason:
        type: string
    required:
      - available
      - reason
        
  StoreStatusAdmin:
    type: object
    properties:
      locked:
        type: boolean
      message:
        type: string
      now:
        type: string
        format: date-time
      bookings:
        type: integer
      descriptions:
        type: integer
      filters:
        type: integer
      old_bookings:
         type: integer
      policies:
        type: integer
      resources:
        type: integer
      slots:
        type: integer
      streams:
        type: integer
      uis:
        type: integer
      ui_sets:
        type: integer
      users:
        type: integer
      windows:
        type: integer
    required:
      - locked
      - message
      - now
      - bookings
      - descriptions
      - filters
      - old_bookings
      - policies
      - resources
      - slots
      - streams
      - uis
      - ui_sets
      - users
      - windows
      
  StoreStatusUser:
    type: object
    properties:
      locked:
        type: boolean
      message:
        type: string
      now:
        type: string
        format: date-time
    required:
      - locked
      - message
      - now

  UI:
    title: User Interface
    type: object
    properties:
      url:
        description: template for the URL for the user interface
        example: https://static.practable.io/ui/penduino-basic.html?video={{video}}&data={{data}}
        type: string
      streams_required:
        description: list of names of required streams
        example: ["data","video"]
        type: array
        items:
          type: string
          example: video
          description: stream name
      description:
        type: string
    required:
    - url
    - description

  UIDescribed:
    title: User Interface with description including
    type: object
    properties:
      url:
        description: template for the URL for the user interface
        example: https://static.practable.io/ui/penduino-basic.html?video={{video}}&data={{data}}
        type: string
      streams_required:
        description: list of names of required streams
        example: ["data","video"]
        type: array
        items:
          type: string
          example: video
          description: stream name
      description:
        $ref: '#/definitions/Description'
    required:
    - url
    - description
    
  UISet:
    title: set of User Interfaces
    type: object
    properties:
      UIs:
       type: array
       items:
         type: string
      
  User:
    type: object
    properties:
      bookings:
        type: array
        items:
          type: string
      old_bookings:
        type: array
        items:
          type: string
      policies:
        type: array
        items:
          type: string
      usage:
        type: object
        additionalProperties:
          type: string
          
  UserName:
    type: object
    properties:
      user_name:
        type: string
        
  Users:
    title: set of Users (export only)
    type: object
    additionalProperties:
      $ref: '#/definitions/User'
      
  Window:
    type: object
    properties:
      allowed:
        type: array
        items:
          $ref: '#/definitions/Interval'
      denied:
        type: array
        items:
          $ref: '#/definitions/Interval'
    required:
      - allowed

# Descriptions of common responses
responses:
  NotFound:
    description: The specified resource was not found
    schema:
      $ref: '#/definitions/Error'
  Unauthorized:
    description: Unauthorized
    schema:
      $ref: '#/definitions/Error'
  InternalError:
    description: Internal Error
    schema:
      $ref: '#/definitions/Error'
  ErrorList:
    description: list of errors
    schema:
      type: array
      items:
        type: string

tags:
- name: admin
  description: 'for admins only'
- name: users
  description: 'for users'
