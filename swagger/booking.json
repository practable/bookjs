{
  "swagger": "2.0",
  "info": {
    "version": "0.4",
    "title": "Booking",
    "description": "User API for booking experiments",
    "contact": {
      "email": "timothy.d.drysdale@gmail.com",
      "name": "Tim Drysdale",
      "url": "https://practable.io"
    }
  },
  "host": "book.practable.io",
  "basePath": "/api/v1",
  "securityDefinitions": {
    "Bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/admin/poolstore": {
      "delete": {
        "description": "Delete the contents of the pool store including bookings",
        "summary": "Delete current state",
        "tags": [
          "admin"
        ],
        "operationId": "deletePoolStore",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "schema": {}
          },
          "404": {
            "description": "Unauthorized",
            "schema": {}
          },
          "500": {
            "description": "",
            "schema": {}
          }
        }
      },
      "get": {
        "description": "Export the current pool store including bookings",
        "summary": "Export current state",
        "tags": [
          "admin"
        ],
        "operationId": "exportPoolStore",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/poolstore"
            },
            "headers": {}
          },
          "401": {
            "description": "Unauthorized",
            "schema": {}
          },
          "500": {
            "description": "",
            "schema": {}
          }
        }
      },
      "post": {
        "description": "Import a new pool store including bookings",
        "summary": "Import new current state",
        "tags": [
          "admin"
        ],
        "operationId": "importPoolStore",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "poolstore",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/poolstore"
            }
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/store_status"
            },
            "headers": {}
          },
          "401": {
            "description": "Unauthorized",
            "schema": {}
          },
          "500": {
            "description": "",
            "schema": {}
          }
        }
      }
    },
    "/admin/status": {
      "get": {
        "description": "Get the current status (number of groups, pools, bookings, time til last booking finished etc)",
        "summary": "Get current status",
        "tags": [
          "admin"
        ],
        "operationId": "getStoreStatus",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/store_status"
            },
            "headers": {}
          },
          "401": {
            "description": "Unauthorized",
            "schema": {}
          },
          "500": {
            "description": "",
            "schema": {}
          }
        }
      },
      "post": {
        "description": "Set whether the bookings are locked or not",
        "summary": "set/release booking lock",
        "tags": [
          "admin"
        ],
        "operationId": "setLock",
        "deprecated": false,
        "parameters": [
          {
            "name": "lock",
            "in": "query",
            "required": true,
            "type": "boolean",
            "description": "set booking lock"
          }
        ],
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/store_status"
            },
            "headers": {}
          },
          "401": {
            "description": "Unauthorized",
            "schema": {}
          },
          "500": {
            "description": "",
            "schema": {}
          }
        }
      }
    },
    "/groups": {
      "get": {
        "description": "Gets group id for a given group name",
        "summary": "groups",
        "tags": [
          "groups"
        ],
        "operationId": "getGroupIDByName",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "Search by group name"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "group id",
                "example": "3a834b55-07c8-cb39-a341-3a82b263e07c"
              }
            },
            "headers": {}
          },
          "401": {
            "description": "Unauthorized",
            "schema": {}
          },
          "500": {
            "description": "",
            "schema": {}
          }
        }
      },
      "post": {
        "description": "Create new group",
        "summary": "groups",
        "tags": [
          "groups"
        ],
        "operationId": "addNewGroup",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "group",
            "required": true,
            "schema": {
              "$ref": "#/definitions/group"
            }
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/id"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {}
          },
          "500": {
            "description": "",
            "schema": {}
          }
        }
      }
    },
    "/groups/{group_id}": {
      "delete": {
        "description": "Delete this group, but not the pools associated with it.",
        "summary": "groups",
        "tags": [
          "groups"
        ],
        "operationId": "deleteGroup",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "schema": {}
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "",
            "schema": {}
          }
        }
      },
      "get": {
        "description": "Gets a description of a group",
        "summary": "groups",
        "tags": [
          "groups"
        ],
        "operationId": "getGroupDescriptionByID",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/description"
            },
            "headers": {}
          },
          "401": {
            "description": "Unauthorized",
            "schema": {}
          },
          "404": {
            "description": "Not Found",
            "schema": {}
          },
          "500": {
            "description": "",
            "schema": {}
          }
        }
      }
    },
    "/groups/{group_id}/pools": {
      "delete": {
        "description": "Delete one or more pool_ids in the group. Return new complete list.",
        "summary": "groups",
        "tags": [
          "groups"
        ],
        "operationId": "deletePoolsByGroupID",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "pools",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/id_list"
            }
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/id_list"
            },
            "headers": {}
          },
          "401": {
            "description": "Unauthorized",
            "schema": {}
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "",
            "schema": {}
          }
        }
      },
      "get": {
        "description": "Gets a list of pool_ids in the group",
        "summary": "groups",
        "tags": [
          "groups"
        ],
        "operationId": "getPoolsByGroupID",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/id_list"
            },
            "headers": {}
          },
          "401": {
            "description": "Unauthorized",
            "schema": {}
          },
          "404": {
            "description": "Not Found",
            "schema": {}
          },
          "500": {
            "description": "",
            "schema": {}
          }
        }
      },
      "post": {
        "description": "Add a list of pool_ids in the group (keep existing). Return new complete list.",
        "summary": "groups",
        "tags": [
          "groups"
        ],
        "operationId": "addPoolsByGroupID",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "pools",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/id_list"
            }
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/id_list"
            },
            "headers": {}
          },
          "401": {
            "description": "Unauthorized",
            "schema": {}
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "",
            "schema": {}
          }
        }
      },
      "put": {
        "description": "Update list of pool_ids in the group (replace existing). Return new complete list.",
        "summary": "groups",
        "tags": [
          "groups"
        ],
        "operationId": "replacePoolsByGroupID",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "group_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "pools",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/id_list"
            }
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/id_list"
            },
            "headers": {}
          },
          "401": {
            "description": "Unauthorized",
            "schema": {}
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "",
            "schema": {}
          }
        }
      }
    },
    "/login": {
      "get": {
        "description": "Get details of currently held bookings and max number of bookings that can be held",
        "summary": "Get current bookings",
        "tags": [
          "login"
        ],
        "operationId": "getCurrentBookings",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/bookings"
            },
            "headers": {}
          },
          "401": {
            "description": "Unauthorized",
            "schema": {}
          },
          "404": {
            "description": "Not Found",
            "schema": {}
          },
          "500": {
            "description": "Internal Error",
            "schema": {}
          }
        }
      },
      "post": {
        "description": "Login with a class token to get an individual booking token, usable for a finite period.",
        "summary": "login",
        "tags": [
          "login"
        ],
        "operationId": "login",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "expired",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "token": {
                  "type": "string",
                  "description": "booking token",
                  "example": "ey..."
                }
              }
            }
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/bookingtoken"
            },
            "headers": {}
          },
          "401": {
            "description": "Unauthorized",
            "schema": {}
          },
          "500": {
            "description": "Internal Error",
            "schema": {}
          }
        }
      }
    },
    "/pools": {
      "get": {
        "description": "Gets a list of all pool_ids",
        "summary": "pools",
        "tags": [
          "pools"
        ],
        "operationId": "getAllPools",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Limit search to pools with name containing this string (case sensitive)"
          },
          {
            "name": "exact",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Limit search to pools with exact match to the name (meaningless on own)"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/id_list"
            },
            "headers": {}
          },
          "401": {
            "description": "Unauthorized",
            "schema": {}
          },
          "404": {
            "description": "Not Found",
            "schema": {}
          },
          "500": {
            "description": "Internal Error",
            "schema": {}
          }
        }
      },
      "post": {
        "description": "Add a pool to the poolstore, using details in body",
        "summary": "Add a new pool",
        "tags": [
          "pools"
        ],
        "operationId": "addNewPool",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "pool",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pool"
            }
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/id"
            },
            "headers": {}
          },
          "401": {
            "description": "Unauthorized",
            "schema": {}
          },
          "404": {
            "description": "Unauthorized",
            "schema": {}
          },
          "500": {
            "description": "",
            "schema": {}
          }
        }
      }
    },
    "/pools/{pool_id}": {
      "get": {
        "description": "Gets a description of the pool",
        "summary": "pools",
        "tags": [
          "pools"
        ],
        "operationId": "getPoolDescriptionByID",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "pool_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/description"
            },
            "headers": {}
          },
          "401": {
            "description": "Unauthorized",
            "schema": {}
          },
          "500": {
            "description": "Internal Error",
            "schema": {}
          }
        }
      },
      "delete": {
        "description": "Delete this pool and all its data (including activities)",
        "summary": "Delete this pool",
        "tags": [
          "pools"
        ],
        "operationId": "deletePool",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "pool_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the pool to delete"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "schema": {}
          },
          "404": {
            "description": "Not Found",
            "schema": {}
          },
          "500": {
            "description": "",
            "schema": {}
          }
        }
      }
    },
    "/pools/{pool_id}/activities": {
      "post": {
        "description": "Adds an activity to a pool (activty must include valid exp field)",
        "summary": "Adds an activity to a pool",
        "tags": [
          "pools"
        ],
        "operationId": "addActivityByPoolID",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "pool_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "in": "body",
            "name": "activity",
            "required": true,
            "schema": {
              "$ref": "#/definitions/activity"
            }
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/id"
            },
            "headers": {}
          },
          "401": {
            "description": "Unauthorized",
            "schema": {}
          },
          "404": {
            "description": "Not Available",
            "schema": {}
          },
          "500": {
            "description": "Internal Error",
            "schema": {}
          }
        }
      }
    },
    "/pools/{pool_id}/activities/{activity_id}": {
      "delete": {
        "description": "Delete activity by activity ID",
        "summary": "Delete activity",
        "tags": [
          "pools"
        ],
        "operationId": "deleteActivityByID",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "pool_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "activity_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "schema": {}
          },
          "404": {
            "description": "Not Found",
            "schema": {}
          },
          "500": {
            "description": "Internal Error",
            "schema": {}
          }
        }
      },
      "get": {
        "description": "Get activity description by activity ID",
        "summary": "Get activity description",
        "tags": [
          "pools"
        ],
        "operationId": "getActivityByID",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "pool_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "activity_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "details",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "True returns all available details, false just description."
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/description"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {}
          },
          "404": {
            "description": "Not Found",
            "schema": {}
          },
          "500": {
            "description": "Internal Error",
            "schema": {}
          }
        }
      },
      "put": {
        "description": "Updates an activity in a pool (or adds one with a specific ID if does not exist)",
        "summary": "Update an activity in a pool",
        "tags": [
          "pools"
        ],
        "operationId": "updateActivityByID",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "pool_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "activity_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "in": "body",
            "name": "activity",
            "required": true,
            "schema": {
              "$ref": "#/definitions/activity"
            }
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/id"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {}
          },
          "404": {
            "description": "Not Found",
            "schema": {}
          },
          "500": {
            "description": "Internal Error",
            "schema": {}
          }
        }
      }
    },
    "/pools/{pool_id}/sessions": {
      "post": {
        "description": "Request a session on an activity from the pool",
        "summary": "Requests a session from a pool",
        "tags": [
          "pools"
        ],
        "operationId": "requestSessionByPoolID",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "duration",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "duration of requested booking in seconds"
          },
          {
            "name": "pool_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/activity"
            },
            "headers": {}
          },
          "401": {
            "description": "Unauthorized",
            "schema": {}
          },
          "402": {
            "description": "Quota Exceeded",
            "schema": {}
          },
          "404": {
            "description": "Not Available",
            "schema": {}
          },
          "500": {
            "description": "Internal Error",
            "schema": {}
          }
        }
      }
    },
    "/pools/{pool_id}/status": {
      "get": {
        "description": "Gets the status of pool's activities",
        "summary": "Gets the status of the pool's activities",
        "tags": [
          "pools"
        ],
        "operationId": "getPoolStatusByID",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "pool_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "duration",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "float64",
            "description": ""
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/status"
            },
            "headers": {}
          },
          "401": {
            "description": "Unauthorized",
            "schema": {}
          },
          "500": {
            "description": "Internal Error",
            "schema": {}
          }
        }
      }
    }
  },
  "definitions": {
    "activity": {
      "title": "activity",
      "description": "An activity represents connection details to instances of pre-agreed resource types such as video, data streams and user interfaces.",
      "type": "object",
      "properties": {
        "description": {
          "$ref": "#/definitions/description"
        },
        "exp": {
          "description": "Expires At",
          "type": "number",
          "format": "unix-timestamp"
        },
        "streams": {
          "description": "A list of streams",
          "type": "array",
          "items": {
            "$ref": "#/definitions/stream"
          }
        },
        "uis": {
          "description": "User interfaces",
          "type": "array",
          "items": {
            "$ref": "#/definitions/userInterface"
          }
        }
      },
      "required": [
        "description",
        "exp",
        "streams",
        "uis"
      ]
    },
    "bookings": {
      "title": "details of bookings held",
      "description": "Contains credentials to access currently booked activities and info on max concurrent sessions",
      "type": "object",
      "properties": {
        "max": {
          "description": "Maximum concurrent bookings permitted",
          "type": "number",
          "format": "int"
        },
        "activities": {
          "description": "Array of activities, including credentials, sufficient to permit access to the activities",
          "type": "array",
          "items": {
            "$ref": "#/definitions/activity"
          }
        }
      },
      "required": [
        "max",
        "activities"
      ]
    },
    "bookingtoken": {
      "title": "booking token details",
      "description": "contains token plus its details",
      "type": "object",
      "properties": {
        "token": {
          "description": "booking token",
          "example": "ey...",
          "type": "string"
        },
        "iat": {
          "description": "Issued At",
          "type": "number",
          "format": "unix-timestamp"
        },
        "nbf": {
          "description": "Not before",
          "type": "number",
          "format": "unix-timestamp"
        },
        "exp": {
          "description": "Expires At",
          "type": "number",
          "format": "unix-timestamp"
        },
        "aud": {
          "description": "Audience",
          "type": "string"
        },
        "sub": {
          "description": "Subject",
          "type": "string"
        },
        "groups": {
          "description": "List of group names (not ID)",
          "type": "array",
          "items": {
            "type": "string",
            "example": "stuff"
          }
        },
        "scopes": {
          "description": "List of scopes",
          "type": "array",
          "items": {
            "type": "string",
            "example": "booking"
          }
        },
        "pools": {
          "description": "List of pool IDs (not name)",
          "type": "array",
          "items": {
            "type": "string",
            "example": "d220c320-eb88-456b-b1dd-b36dae840af2"
          }
        }
      },
      "required": [
        "token",
        "nbf",
        "exp",
        "aud",
        "sub",
        "groups",
        "scopes"
      ]
    },
    "description": {
      "title": "description",
      "description": "Description of a resource e.g. pool, activity, user interface",
      "example": {
        "name": "Penduino (basic)",
        "type": "pool",
        "short": "Penduino electromagnetic pendulums with pulsed drive and braking",
        "long": "Some longer description",
        "further": "https://static.practable.io/descriptions/pools/penduino/index.html",
        "thumb": "https://assets.practable.io/images/pools/penduino/thumb.png",
        "image": "https://assets.practable.io/images/pools/penduino/image.png"
      },
      "type": "object",
      "properties": {
        "name": {
          "description": "Display name",
          "example": "Penduino (basic)",
          "type": "string"
        },
        "short": {
          "description": "140 char max description of the interface in plain text",
          "example": "Interface to the penduino electromagnetic pendulum with variable drive, active braking, short and open circuit loading.",
          "type": "string"
        },
        "long": {
          "description": "280 char additional description of the interface in plain text",
          "type": "string"
        },
        "further": {
          "description": "URL for further information",
          "example": "https://static.practable.io/info/penduino/ui.html",
          "type": "string"
        },
        "thumb": {
          "description": "URL of thumbnail image (150x150)",
          "example": "https://assets.practable.io/images/penduino-150x150.png",
          "type": "string"
        },
        "image": {
          "description": "URL of main image (500x500)",
          "example": "https://assets.practable.io/images/penduino-500x500.png",
          "type": "string"
        },
        "type": {
          "description": "Type of resource being described, e.g. pool, activity, userinterface",
          "example": "userinterface",
          "type": "string"
        },
        "id": {
          "description": "Identification used in PoolStore",
          "type": "string"
        }
      },
      "required": [
        "name",
        "type"
      ]
    },
    "group": {
      "title": "group",
      "description": "Represents a group (must have a name for tokens to work)",
      "type": "object",
      "properties": {
        "description": {
          "$ref": "#/definitions/description"
        },
        "pools": {
          "type": "array",
          "items": {
            "type": "string",
            "description": "poolIDs to add to the group"
          }
        }
      },
      "required": [
        "description"
      ]
    },
    "id": {
      "title": "id",
      "description": "id of a resource",
      "example": {
        "id": "d220c320-eb88-456b-b1dd-b36dae840af2"
      },
      "type": "object",
      "properties": {
        "id": {
          "description": "identification",
          "example": "d220c320-eb88-456b-b1dd-b36dae840af2",
          "type": "string"
        }
      },
      "required": [
        "id"
      ]
    },
    "id_list": {
      "title": "ID list",
      "description": "list of ids (in array)",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "permission": {
      "title": "relay permission",
      "description": "Represents fields needed in relay permission tokens",
      "type": "object",
      "properties": {
        "audience": {
          "type": "string"
        },
        "connection_type": {
          "type": "string"
        },
        "scopes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "topic": {
          "type": "string"
        }
      },
      "required": [
        "audience",
        "connection_type",
        "scopes",
        "topic"
      ]
    },
    "pool": {
      "title": "pool",
      "description": "Represents a pool",
      "type": "object",
      "properties": {
        "description": {
          "$ref": "#/definitions/description"
        },
        "min_session": {
          "type": "number",
          "format": "int64"
        },
        "max_session": {
          "type": "number",
          "format": "int64"
        }
      },
      "required": [
        "description"
      ]
    },
    "poolstore": {
      "title": "Pool Store",
      "description": "complete status required for failover. Encoded strings used for convenience and seperation of concerns, at cost of performance.",
      "type": "object",
      "properties": {
        "pool": {
          "type": "string",
          "description": "base64-encoded string representing PoolStore in JSON format"
        },
        "booking": {
          "type": "string",
          "description": "base64-encoded string representing bookingstore in JSON format"
        }
      },
      "required": [
        "pool",
        "booking"
      ]
    },
    "status": {
      "title": "status",
      "description": "Status of a pool",
      "example": {
        "available": 3,
        "wait": 0,
        "inuse": 5
      },
      "type": "object",
      "properties": {
        "available": {
          "description": "Number of available kits",
          "example": 3,
          "type": "number",
          "format": "int"
        },
        "later": {
          "description": "Kit available later?",
          "example": true,
          "type": "boolean"
        },
        "wait": {
          "description": "Wait time in seconds until first kit available later",
          "example": 3200,
          "type": "number",
          "format": "int64"
        },
        "used": {
          "description": "Number of kits in use",
          "example": 5,
          "type": "number",
          "format": "int"
        }
      },
      "required": [
        "available"
      ]
    },
    "store_status": {
      "title": "Store status",
      "description": "Counts of groups, pools, activities, booked sessions",
      "type": "object",
      "properties": {
        "groups": {
          "type": "number",
          "format": "int"
        },
        "pools": {
          "type": "number",
          "format": "int"
        },
        "activities": {
          "type": "number",
          "format": "int"
        },
        "bookings": {
          "type": "number",
          "format": "int"
        },
        "last_booking_ends": {
          "type": "number",
          "format": "unix-timestamp"
        },
        "locked": {
          "type": "boolean"
        }
      }
    },
    "stream": {
      "title": "stream",
      "description": "Represents an assigned, valid booking slot for an individual piece of equipment",
      "example": {
        "for": "video",
        "url": "https://relay-access.practable.io/session/abc123",
        "token": "ey...."
      },
      "type": "object",
      "properties": {
        "for": {
          "description": "Describes the stream, and doubles as template key in the URL",
          "example": "video",
          "type": "string"
        },
        "url": {
          "description": "URL at which to obtain access to the stream (getting a redirect URL containing a one time code)",
          "example": "https://relay-access.practable.io/session/abc123",
          "type": "string"
        },
        "token": {
          "description": "JWT bearer token for submitting in the header when making the request at the URL",
          "type": "string"
        },
        "verb": {
          "description": "HTPP verb to use when making request to the URL",
          "example": "POST",
          "type": "string",
          "default": "POST"
        },
        "permission": {
          "$ref": "#/definitions/permission"
        }
      },
      "required": [
        "for",
        "url",
        "permission"
      ]
    },
    "userInterface": {
      "title": "userInterface",
      "description": "User interface",
      "type": "object",
      "properties": {
        "url": {
          "description": "URL of the user interface",
          "example": "https://static.practable.io/ui/penduino-basic.html?video={{video}}&data={{data}}",
          "type": "string"
        },
        "streamsRequired": {
          "description": "list of names of required streams",
          "example": [
            "data",
            "video"
          ],
          "type": "array",
          "items": {
            "type": "string",
            "example": "video",
            "description": "stream name"
          }
        },
        "description": {
          "$ref": "#/definitions/description"
        }
      },
      "required": [
        "url",
        "description"
      ]
    }
  },
  "tags": [
    {
      "name": "admin",
      "description": ""
    },
    {
      "name": "groups",
      "description": ""
    },
    {
      "name": "pools",
      "description": ""
    },
    {
      "name": "login",
      "description": ""
    }
  ]
}
